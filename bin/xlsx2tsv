#!/usr/bin/env perl
use warnings;
use strict;
use open qw(locale);
use utf8;

#------------------------------------------------------------------------------
# TODO: accept multiple filenames
# TODO: stdin?

#------------------------------------------------------------------------------
use File::Basename qw(basename);
our $PROGNAME = basename($0);

#------------------------------------------------------------------------------
my $format;
if ($PROGNAME eq 'xlsx2tsv') {
    $format = 'tsv';
} elsif ($PROGNAME eq 'xlsx2csv') {
    $format = 'csv';
} else {
    die("cannot be invoked as $PROGNAME\n");
}

###############################################################################

use Spreadsheet::ParseXLSX;
use Text::CSV_XS;

my $filename = shift(@ARGV);
die("No filename specified.\n") unless defined $filename;

my $parser = Spreadsheet::ParseXLSX->new;
my $workbook = $parser->parse($filename);

die("No XLSX workbook found.\n") unless $workbook;

my $csv;
if ($format eq 'csv') {
    $csv = Text::CSV_XS->new({
        binary => 1, auto_diag => 1
    });
}

for my $worksheet ( $workbook->worksheets() ) {
    my ( $row_min, $row_max ) = $worksheet->row_range();
    my ( $col_min, $col_max ) = $worksheet->col_range();
    for my $row ( $row_min .. $row_max ) {
        my @row = ();
        for my $col ( $col_min .. $col_max ) {
            my $cell = $worksheet->get_cell( $row, $col );
            push(@row, $cell ? $cell->value : undef);
            # TODO: option to print $cell->unformatted()
        }
        if ($format eq 'tsv') {
            foreach (@row) {
                $_ //= '';
            }
            print(join("\t", @row), "\n");
        } elsif ($format eq 'csv') {
            foreach (@row) {
                $_ //= '';
            }
            $csv->say(\@row);
        }
    }
}
